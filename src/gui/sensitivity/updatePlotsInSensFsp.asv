function [] = updatePlotsInSensFsp(app)
% This function Updates the plots when any change occurs in selection of
% the species shown and changes in the timeslider.

% Find the time index to plot
T_array = unique(eval(app.SensPrintTimesEditField.Value));
[~,j] = min(abs(T_array-app.SensPlotTimeSlider.Value));

% Find the parameter index to plot
ipar = 1;
num_pars = length(app.ReactionsTabOutputs.parameters);
while (~strcmp(app.ReactionsTabOutputs.parameters{ipar}, app.SensParDropDown.Value) && ipar < num_pars)
    ipar = ipar + 1;
end

% Compute the marginal distributions
solutionFormat = app.SensFspTabOutputs.solutions.format;

% if (strcmp(solutionFormat, 'forward'))   
    Nd = app.SensFspTabOutputs.solutions.data{j}.p.dim;
    for i=1:Nd
        INDS = setdiff([1:Nd],i);
        mdist{i} = double(app.SensFspTabOutputs.solutions.data{j}.p.sumOver(INDS).data);
        sensmdist{i} = double(app.SensFspTabOutputs.solutions.data{j}.S(ipar).sumOver(INDS).data);
    end

%     mdist = ssit.fsp.marginals(app.SensFspTabOutputs.solutions.data{j}.states, ...
%                               app.SensFspTabOutputs.solutions.data{j}.p,false);

%     sensmdist = ssit.fsp.marginals(app.SensFspTabOutputs.solutions.data{j}.states,...
%         app.SensFspTabOutputs.solutions.data{j}.dp(:, ipar),false);
% else    
%     mdist = ssit.fsp.marginals(app.SensFspTabOutputs.solutions.data.ps{j}.states, ...
%                               app.SensFspTabOutputs.solutions.data.ps{j}.p,false);
%     sensmdist = ssit.fsp.marginals(app.SensFspTabOutputs.solutions.data.dps{j, ipar}.states,...
%         app.SensFspTabOutputs.solutions.data.dps{j, ipar}.p,false);
% end

hold(app.SensProbAxes,'off'); %%% Add in bin-size allowance
hold(app.SensDerivativeAxes,'off'); %%% Add in bin-size allowance
N_max_x = 0;
N_max_y = 0;
% Plot the marginal distribution

for iSpecies = 1:Nd
    iPlot(iSpecies) = max(contains(app.SpeciesForSensPlot.Value,app.ReactionsTabOutputs.varNames{iSpecies}));
    if iPlot(iSpecies)
        stairs(app.SensProbAxes, [0:length(mdist{i})], [mdist{i};0], 'b','Linewidth',2);
        hold(app.SensProbAxes,'on');
        N_max_x = max(N_max_x,length(mdist{1})-1);
        N_max_y = max(N_max_y,max(abs(mdist{1})));
    end
end
% if app.Sensx1CheckBox.Value
%     stairs(app.SensProbAxes, [0:length(mdist{1})], [mdist{1};0], 'b','Linewidth',2);
%     hold(app.SensProbAxes,'on');
%     N_max_x = max(N_max_x,length(mdist{1})-1);
%     N_max_y = max(N_max_y,max(abs(mdist{1})));
% end
% if app.Sensx2CheckBox.Value
%     stairs(app.SensProbAxes, [0:length(mdist{2})], [mdist{2};0], 'r','Linewidth',2);
%     hold(app.SensProbAxes,'on');
%     N_max_x = max(N_max_x,length(mdist{2})-1);
%     N_max_y = max(N_max_y,max(abs(mdist{2})));
% end
% 
% if app.Sensx3CheckBox.Value
%     stairs(app.SensProbAxes, [0:length(mdist{3})], [mdist{3};0], 'g','Linewidth',2);
%     hold(app.SensProbAxes,'on');
%     N_max_x = max(N_max_x,length(mdist{3})-1);
%     N_max_y = max(N_max_y,max(abs(mdist{3})));
% end
app.FspSolutionAtTimeLabel.Text = ['Solutions at time: t = ',num2str(T_array(j))];
app.SensProbAxes.XLim = [0,N_max_x + 1];
app.SensProbAxes.YLim = N_max_y*[0,1];
app.FSPXminEditField.Value = app.SensProbAxes.XLim(1);
app.FSPXmaxEditField.Value = app.SensProbAxes.XLim(2);
app.FSPYminEditField.Value = app.SensProbAxes.YLim(1);
app.FSPYmaxEditField.Value = app.SensProbAxes.YLim(2);

legend(app.SensProbAxes,app.ReactionsTabOutputs.varNames,'Location','best')

% Plot the marginal sensitivity
N_max_y = 1e-6;
if app.Sensx1CheckBox.Value
    stairs(app.SensDerivativeAxes, [0:length(sensmdist{1})-1], [sensmdist{1}], 'b','Linewidth',2);
    hold(app.SensDerivativeAxes,'on');
    N_max_x = max(N_max_x,length(sensmdist{1})-1);
    N_max_y = max(N_max_y,max(abs(sensmdist{1})));
end
if app.Sensx2CheckBox.Value
    stairs(app.SensDerivativeAxes, [0:length(sensmdist{2})-1], [sensmdist{2}], 'r','Linewidth',2);
    hold(app.SensDerivativeAxes,'on');
    N_max_x = max(N_max_x,length(sensmdist{2})-1);
    N_max_y = max(N_max_y,max(abs(sensmdist{2})));
end
if app.Sensx3CheckBox.Value
    stairs(app.SensDerivativeAxes, [0:length(sensmdist{3})-1], [sensmdist{3}], 'g','Linewidth',2);
    hold(app.SensDerivativeAxes,'on');
    N_max_x = max(N_max_x,length(sensmdist{3})-1);
    N_max_y = max(N_max_y,max(abs(sensmdist{3})));
end
app.FspSolutionAtTimeLabel.Text = ['Solutions at time: t = ',num2str(T_array(j))];
app.SensDerivativeAxes.XLim = [0,N_max_x + 1];
app.SensDerivativeAxes.YLim = N_max_y*[-1 1];
if app.Sensx1CheckBox.Value && app.Sensx2CheckBox.Value && app.Sensx3CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(1,2)),char(app.NameTable.Data(2,2)),char(app.NameTable.Data(3,2)),'Location','northeast')
end
if app.Sensx1CheckBox.Value && app.Sensx2CheckBox.Value && ~app.Sensx3CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(1,2)),char(app.NameTable.Data(2,2)),'Location','best')
end
if app.Sensx3CheckBox.Value && app.Sensx2CheckBox.Value && ~app.Sensx1CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(2,2)),char(app.NameTable.Data(3,2)),'Location','best')
end
if app.Sensx1CheckBox.Value && app.Sensx3CheckBox.Value && ~app.Sensx2CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(1,2)),char(app.NameTable.Data(3,2)),'Location','best')
end
if app.Sensx1CheckBox.Value && ~app.Sensx2CheckBox.Value && ~app.Sensx3CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(1,2)),'Location','best') 
end
if app.Sensx2CheckBox.Value && ~app.Sensx1CheckBox.Value && ~app.Sensx3CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(2,2)),'Location','best')
end
if app.Sensx3CheckBox.Value && ~app.Sensx1CheckBox.Value && ~app.Sensx2CheckBox.Value
    legend(app.SensDerivativeAxes,char(app.NameTable.Data(3,2)),'Location','best')  
end
% keyboard
end